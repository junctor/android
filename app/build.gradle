plugins {
    alias libs.plugins.android.application
    alias libs.plugins.compose.compiler
    alias libs.plugins.org.jetbrains.kotlin.android
    alias libs.plugins.google.services
    alias libs.plugins.firebase.crashlytics
    id 'kotlin-parcelize'
    alias libs.plugins.ktlint
}

android {
    namespace "com.shortstack.hackertracker"
    compileSdk libs.versions.compileSdk.get() as Integer

    defaultConfig {
        applicationId "com.shortstack.hackertracker"
        minSdk libs.versions.minSdk.get() as Integer
        targetSdk libs.versions.targetSdk.get() as Integer
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        compose true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    namespace 'com.shortstack.hackertracker'
}

dependencies {
    implementation project(':core')
    implementation project(':data')
    implementation project(':ui')
    implementation project(':feature-firebase')
    implementation project(':feature-merch')
    implementation project(':feature-locations')
    implementation project(':feature-reminder')
    implementation project(':feature-wifi')
    implementation project(":feature-organizations")
    implementation project(":feature-documents")
    implementation project(":feature-analytics")
    implementation project(':feature-play')
    implementation project(':feature-feedback')

    def composeBom = platform(libs.androidx.compose.bom)
    implementation composeBom
    androidTestImplementation composeBom

    implementation(libs.androidx.material3)
    implementation(libs.androidx.ui.tooling.preview)
    debugImplementation(libs.androidx.ui.tooling)

    implementation(libs.androidx.foundation)

    implementation(libs.androidx.ktx)
    implementation(libs.androidx.lifecycle.viewmodel.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.work.runtime.ktx)
    implementation(libs.android.material)

    implementation(libs.koin)
    implementation(libs.koin.androidx.compose)
    implementation(libs.kotlinx.coroutines.core)

    implementation platform(libs.firebase.bom)
    implementation(libs.firebase.analytics.ktx)
    implementation(libs.firebase.firestore)
    implementation(libs.firebase.storage)
    implementation(libs.firebase.auth)
    implementation(libs.firebase.crashlytics)
    implementation(libs.firebase.messaging)

    implementation(libs.androidx.activity.compose)
    implementation(libs.androidx.lifecycle.viewmodel.compose)
    implementation(libs.androidx.navigation.compose)
    implementation(libs.gson)

    testImplementation(libs.junit)
    testImplementation(libs.mockk)
    testImplementation(libs.kotlinx.coroutines.test)
    androidTestImplementation(libs.ext.junit)
    androidTestImplementation(libs.espresso.core)
}

ktlint {
    android.set true
    outputColorName.set "RED"
}
